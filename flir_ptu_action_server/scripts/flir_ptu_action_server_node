#!/usr/bin/env python3

import rospy
import actionlib

from ptz_action_server_msgs.msg import PtzAction, PtzFeedback, PtzActionGoal, PtzResult
from ptz_action_server_msgs.msg import PtzPosition
from sensor_msgs.msg import JointState

from math import pi

def joint_state_callback(data, node):
    node.joint_state_callback(data)

def clamp_value(x, min, max, metavar='pan'):
    if x < min:
        rospy.logwarn('Requested {0}={1} is too small. Clamping to {2}'.format(metavar, x, min))
        return min
    elif x > max:
        rospy.logwarn('Requested {0}={1} is too large. Clamping to {2}'.format(metavar, x, max))
        return max
    else:
        return x

## Provides a PTZ.action compatible interface for sending pan-tilt positions to the flir_ptu driver
class FlirD46PtzControlNode:
    HW_MIN_PAN = -2.775073510670984
    HW_MAX_PAN = 2.775073510670984

    HW_MIN_TILT = -0.8203047484373349
    HW_MAX_TILT = 0.5410520681182421

    def __init__(self):
        self.cmd_topic = rospy.get_param('~cmd_topic', '/ptu/cmd')
        self.act_ns = rospy.get_param('~act_ns', '/ptu')
        self.pan_joint = rospy.get_param('~pan_joint', 'ptu_pan')
        self.tilt_joint = rospy.get_param('~tilt_joint', 'ptu_tilt')

        self.MIN_PAN = float(rospy.get_param('~min_pan', -2.356194490192345))
        self.MAX_PAN = float(rospy.get_param('~max_pan', 2.356194490192345))
        self.MIN_TILT = float(rospy.get_param('~min_tilt', -0.7853981633974483))
        self.MAX_TILT = float(rospy.get_param('~max_tilt', 1.5707963267948966))

        self.INVERT_PAN = bool(rospy.get_param('~invert_pan', False))
        self.INVERT_TILT = bool(rospy.get_param('~invert_tilt', False))

        # allow 1 degree of error when tracking the position feedback
        self.position_tolerance = 1 * pi / 180.0
        self.goal_pan = 0.0
        self.goal_tilt = 0.0

        self.current_pan = 0.0
        self.current_tilt = 0.0

        self.is_moving = False

        self.ptz_srv = actionlib.SimpleActionServer('{0}/move_ptz'.format(self.act_ns), PtzAction, self.ptz_actionHandler, False)


    ## Starts the subscribers, publishers, and service handlers
    def start(self):
        self.cmd_pub = rospy.Publisher(self.cmd_topic, JointState, queue_size=1)
        self.joint_state_sub = rospy.Subscriber('/joint_states', JointState, joint_state_callback, self)
        self.status_pub = rospy.Publisher('{0}/ptz_state'.format(self.act_ns), PtzPosition, queue_size=1)
        self.ptz_srv.start()


    ## Handler for the PTZ.action call
    #  Converts the PTZ request into a JointState we write to the flir_ptu driver
    #  and then wait until /joint_states reports that the PTU has finished moving
    #
    #  \param ptz_req  The PtzActionGoal object to process
    def ptz_actionHandler(self, ptz_req):
        # make sure the requested position is valid
        pan = clamp_value(ptz_req.pan, self.MIN_PAN, self.MAX_PAN, 'pan')
        tilt = clamp_value(ptz_req.tilt, self.MIN_PAN, self.MAX_TILT, 'tilt')

        self.goal_pan = pan
        self.goal_tilt = tilt

        # tell the underlying driver to start moving
        self.is_moving = True
        cmd = self.mk_joint_state(self.goal_pan, self.goal_tilt)
        self.cmd_pub.publish(cmd)

        # sleep until joint_states reports that the pan and tilt joints have reached the desired position OR
        # have stopped moving
        rate = rospy.Rate(10)

        # Note that the Flir PTU driver sometimes reports bad joint state information (especially over ethernet?)
        # The unit moves correctly, but the position and speed are incorrect.
        # To avoid the action server hanging, implement a hard timeout
        MAX_WAIT = 60.0         # moving from -135 to + 135 takes ~50s.
        elapsed_wait = 0.0
        while self.is_moving and not self.ptz_srv.is_preempt_requested() and elapsed_wait < MAX_WAIT:
            feedback = PtzFeedback()
            feedback.zoom_remaining = 0.0
            feedback.pan_remaining = self.goal_pan - self.current_pan
            feedback.tilt_remaining = self.goal_tilt - self.current_tilt
            self.ptz_srv.publish_feedback(feedback)
            rate.sleep()
            elapsed_wait = elapsed_wait + 0.1   # rate is 10Hz, so each spin is 0.1s

        if self.ptz_srv.is_preempt_requested():
            rospy.logwarn("PTZ action cancelled")
            self.is_moving = False
            self.ptz_srv.set_preempted()
        elif elapsed_wait >= MAX_WAIT:
            rospy.logwarn("PTZ action timed out.  Assuming movement is complete")
            self.is_moving = False
            ptz_resp = PtzResult()
            ptz_resp.success = True
            self.ptz_srv.set_succeeded(ptz_resp)
        else:
            ptz_resp = PtzResult()
            ptz_resp.success = True
            self.ptz_srv.set_succeeded(ptz_resp)


    ## Monitors /joint_states to determine if the pan and tilt joints have reached their goal positions yet
    #
    # \param data  The JointState information received on /joint_states
    def joint_state_callback(self, data):
        try:
            pan_index = data.name.index(self.pan_joint)
            tilt_index = data.name.index(self.tilt_joint)

            # read the current pan and tilt positions and calculate their deltas.
            # we cannot use the velocity field, as this is the joints' desired velocity, not
            # its actual velocity.
            pan = data.position[pan_index]
            tilt = data.position[tilt_index]

            # convert from the hardware coordinate range to the action coordiante range
            if self.INVERT_PAN:
                pan = -pan
            while pan > self.MAX_PAN:
                pan = pan - 2*pi
            while pan < self.MIN_PAN:
                pan = pan + 2*pi

            if self.INVERT_TILT:
                tilt = -tilt
            while tilt > self.MAX_TILT:
                tilt = tilt - 2*pi
            while tilt < self.MIN_TILT:
                tilt = tilt + 2*pi

            dpan = pan - self.current_pan
            dtilt = tilt - self.current_tilt

            self.current_pan = pan
            self.current_tilt = tilt

            # publish the current PTZ state
            state = PtzPosition()
            state.pan = pan
            state.tilt = tilt
            state.zoom = 0
            self.status_pub.publish(state)

            if self.is_moving and (\
                (dpan == 0 and dtilt == 0) and ( \
                    abs(self.goal_pan - pan) < self.position_tolerance and \
                    abs(self.goal_tilt - tilt) < self.position_tolerance \
                )):
                self.is_moving = False

        except ValueError as err:
            # the pan and tilt joints are not in the message. this is normal.
            pass
        except Exception as err:
            rospy.logerror(err)


    ## Convert the PtzResult to a JointState we can write back to the driver
    #
    # \param  goal_pan   The desired pan angle, in radians
    # \param  goal_tilt  The desired tilt angle, in radians
    # \return a JointState object corresponding to the requested PTZ position
    def mk_joint_state(self, goal_pan, goal_tilt):

        # convert from the action coordinate range to the hardware coordiante range
        if self.INVERT_PAN:
            goal_pan = -goal_pan
        while goal_pan > self.HW_MAX_PAN:
            goal_pan = goal_pan - 2*pi
        while goal_pan < self.HW_MIN_PAN:
            goal_pan = goal_pan + 2*pi

        if self.INVERT_TILT:
            goal_tilt = -goal_tilt
        while goal_tilt > self.HW_MAX_TILT:
            goal_tilt = goal_tilt - 2*pi
        while goal_tilt < self.HW_MIN_TILT:
            goal_tilt = goal_tilt + 2*pi

        js = JointState()
        js.name = ['ptu_pan', 'ptu_tilt']
        js.velocity = [0.1, 0.1]
        js.position = [goal_pan, goal_tilt]
        js.effort = [0, 0]
        return js

def main():
    rospy.init_node('flir_ptu_action_server_node', anonymous=True)
    node = FlirD46PtzControlNode()
    node.start()
    rospy.spin()

if __name__=='__main__':
    main()
