#!/usr/bin/python3

import actionlib
import math
import rospy

from ptz_action_server_msgs.msg import PtzAction, PtzFeedback, PtzActionGoal, PtzResult
from ptz_action_server_msgs.msg import PtzPosition
from sensor_msgs.msg import Image, JointState
from std_msgs.msg import Float64

import cv2
from cv_bridge import CvBridge, CvBridgeError


## Node that implements the PTZ action server for a simulated camera
#
#  Actual camera data and joint states are provided by Gazebo plugins
#  We use a velocity_controllers/JointPositionController to control the actual pan and tilt
#  joints, subscribing to /joint_states to determine when the camera has finished moving after
#  receiving a command.
#
#  Zoom is implemented as a digital zoom, so expect poor resolution at higher levels.
class SimulatedPtzCameraNode:
    def __init__(self):
        self.pan_limits = rospy.get_param('~pan_limits', [-2*math.pi, 2*math.pi])    # -180 to 180
        self.tilt_limits = rospy.get_param('~tilt_limits', [-math.pi/6, math.pi/2])  # -30 to 90
        self.zoom_limits = rospy.get_param('~zoom_limits', [1, 5])                   # 1x to 5x zoom

        self.current_pan = 0.0
        self.current_tilt = 0.0
        self.current_zoom = 1.0

        self.ANGLE_TOLERANCE = 1.0 * math.pi / 180.0  # allow 1 degree either way for PTZ commands\
        self.ZOOM_RATE = 0.1

        self.bridge = CvBridge()


    ## Start the action server, begin publishing the joint states
    def run(self):
        self.position_sub = rospy.Subscriber('/joint_states', JointState, self.joint_state_callback)
        self.img_sub = rospy.Subscriber('image_raw_nozoom', Image, self.image_callback)
        self.img_pub = rospy.Publisher('image_raw', Image, queue_size=1)
        self.state_pub = rospy.Publisher('ptz_state', PtzPosition, queue_size=1)

        self.pan_cmd = rospy.Publisher('/pan_position_controller/command', Float64, queue_size=1)
        self.tilt_cmd = rospy.Publisher('/tilt_position_controller/command', Float64, queue_size=1)

        self.ptz_srv = actionlib.SimpleActionServer('move_ptz', PtzAction, self.ptz_actionHandler, False)
        self.ptz_srv.start()

        # spin and publish the ptz status at 10Hz
        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            psn = PtzPosition()
            psn.pan = self.current_pan
            psn.tilt = self.current_tilt
            psn.zoom = self.current_zoom
            self.state_pub.publish(psn)

            rate.sleep()


    ## Handler for the move_ptz action
    #
    #  Sends the desired pan & tilt positions to the JointPositionControllers and publishes feedback at 10Hz
    #  until the camera reaches the desired position
    def ptz_actionHandler(self, req):
        goal_pan = req.pan
        if goal_pan < self.pan_limits[0]:
            rospy.logwarn(f"Pan of {req.pan} is too small; clamping to {self.pan_limits[0]}")
            goal_pan = self.pan_limits[0]
        elif goal_pan > self.pan_limits[1]:
            rospy.logwarn(f"Pan of {req.pan} is too large; clamping to {self.pan_limits[1]}")
            goal_pan = self.pan_limits[1]

        goal_tilt = req.tilt
        if goal_tilt < self.tilt_limits[0]:
            rospy.logwarn(f"Tilt of {req.tilt} is too small; clamping to {self.tilt_limits[0]}")
            goal_tilt = self.tilt_limits[0]
        elif goal_tilt > self.tilt_limits[1]:
            rospy.logwarn(f"Tilt of {req.tilt} is too large; clamping to {self.tilt_limits[1]}")
            goal_tilt = self.tilt_limits[1]

        goal_zoom = req.zoom
        if goal_zoom < self.zoom_limits[0]:
            rospy.logwarn(f"Zoom of {req.zoom} is too small; clamping to {self.zoom_limits[0]}")
            goal_zoom = self.zoom_limits[0]
        elif goal_zoom > self.zoom_limits[1]:
            rospy.logwarn(f"Zoom of {req.zoom} is too large; clamping to {self.zoom_limits[1]}")
            goal_zoom = self.zoom_limits[1]

        delta_zoom = 0.0
        if self.current_zoom > goal_zoom:
            delta_zoom = -self.ZOOM_RATE
        elif self.current_zoom < goal_zoom:
            delta_zoom = self.ZOOM_RATE

        msg = Float64(goal_pan)
        self.pan_cmd.publish(msg)
        msg = Float64(goal_tilt)
        self.tilt_cmd.publish(msg)

        rate = rospy.Rate(10)
        is_moving = True
        is_zooming = True
        fback = PtzFeedback()
        is_error = False
        while (is_moving or is_zooming) and not rospy.is_shutdown() and not is_error:
            rate.sleep()

            # adjust the zoom
            if delta_zoom == 0.0 or abs(goal_zoom - self.current_zoom) <= self.ZOOM_RATE:
                is_zooming = False
                self.current_zoom = goal_zoom
            else:
                self.current_zoom = self.current_zoom + delta_zoom
            zoom_to_go = goal_zoom - self.current_zoom

            # the pan angle can wrap around 360 degrees, so it's possible the current pan and desired pan are
            # on opposite sides of the limit (e.g. 359 degrees moving toward 0, which should result in an error of 1
            # not 359)
            pan_to_go = min(abs(goal_pan - self.current_pan), \
                            abs((goal_pan - 2*math.pi) - self.current_pan), \
                            abs((goal_pan + 2*math.pi) - self.current_pan) )
            tilt_to_go = abs(goal_tilt - self.current_tilt)

            # check if we've reached the goal
            if pan_to_go <= self.ANGLE_TOLERANCE and tilt_to_go <= self.ANGLE_TOLERANCE:
                is_moving = False

            # check if we've stopped moving; this may indicate an error with the controller
            if fback.pan_remaining == pan_to_go and fback.tilt_remaining == tilt_to_go and fback.zoom_remaining == zoom_to_go:
                rospy.logwarn("Camera seems to have stopped moving; aborting PTZ action")
                is_error = True
                is_moving = False

            fback.pan_remaining = pan_to_go
            fback.tilt_remaining = tilt_to_go
            fback.zoom_remaining = zoom_to_go
            self.ptz_srv.publish_feedback(fback)

        if rospy.is_shutdown():
            rospy.loginfo("Node shutting down")
        elif is_error:
            rospy.logwarn("PTZ action failed")
            ptz_resp = PtzResult()
            ptz_resp.success = False
            self.ptz_srv.set_succeeded(ptz_resp)
        else:
            rospy.loginfo("PTZ simulator reached goal position")
            ptz_resp = PtzResult()
            ptz_resp.success = True
            self.ptz_srv.set_succeeded(ptz_resp)

    ## Read the current joint_states and update the camera's current position
    def joint_state_callback(self, data):
        if 'ptz_camera_pan_joint' in data.name:
            index = data.name.index('ptz_camera_pan_joint')
            self.current_pan = data.position[index]

        if 'ptz_camera_tilt_joint' in data.name:
            index = data.name.index('ptz_camera_tilt_joint')
            self.current_tilt = data.position[index]


    ## Apply a digital zoom to the input image and republish it
    def image_callback(self, img):
        if self.current_zoom != 1.0:
            # convert to OpenCV, zoom into the middle, convert back to ROS, and publish
            try:
                cv_img = self.bridge.imgmsg_to_cv2(img, "8UC3")
                (rows,cols,channels) = cv_img.shape

                # if the zoom factor is Z, crop the image to the center 1/Z and resize back the original dimensions
                z = self.current_zoom    # this is volatile, so store a local copy!
                w = cols / z
                h = rows / z
                cv_img = cv_img[int(rows/2 - h/2) : int(rows/2 + h/2), int(cols/2 - w/2) : int(cols/2 + w/2)]
                cv_img = cv2.resize(cv_img, (cols, rows))

                # convert back to a ROS image
                img = self.bridge.cv2_to_imgmsg(cv_img, "rgb8")

            except CvBridgeError as err:
                rospy.logerr(f"OpenCV Error {err}")

        # (re-)publish the image
        self.img_pub.publish(img)


if __name__=='__main__':
    rospy.init_node('simulated_ptz_camera_controller')
    node = SimulatedPtzCameraNode()
    node.run()
